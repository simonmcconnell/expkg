const std = @import("std");
const builtin = @import("builtin");

var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
var allocator = arena.allocator();

pub fn build(b: *std.build.Builder) !void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const exe = b.addExecutable(.{
         .name = "<%= @release_name %>",
         .root_source_file = .{ .path = "src/main.zig" },
         .target = target,
         .optimize = optimize
    });

    const options = b.addOptions();
    exe.addOptions("build_options", options);
    options.addOption([]const u8, "RELEASE_NAME", "<%= @release_name %>");

    if (target.isWindows()) {
        exe.addIncludePath(.{ .path = "src/" });
    }

    exe.linkSystemLibrary("c");

    b.installArtifact(exe);

//    const run_cmd = b.addRunArtifact(exe);
//    run_cmd.step.dependOn(b.getInstallStep());

//    if (b.args) |args| {
//        run_cmd.addArgs(args);
//    }

//    const run_step = b.step("run", "Run the app");
//    run_step.dependOn(&run_cmd.step);
}
